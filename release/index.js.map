{"version":3,"file":"index.js","sources":["internal/constants.ts","internal/feature-detection.ts","internal/dom-utils.ts","internal/drag-data-store.ts","internal/drag-utils.ts","internal/drag-operation-controller.ts","index.ts"],"sourcesContent":["// debug mode, which will highlight drop target, immediate user selection and events fired as you interact\r\n// only available in non-minified js / development environment\r\n// export const DEBUG = false;\r\n\r\n// css classes\r\nexport const CLASS_PREFIX = \"dnd-poly-\";\r\nexport const CLASS_DRAG_IMAGE = CLASS_PREFIX + \"drag-image\";\r\nexport const CLASS_DRAG_IMAGE_SNAPBACK = CLASS_PREFIX + \"snapback\";\r\nexport const CLASS_DRAG_OPERATION_ICON = CLASS_PREFIX + \"icon\";\r\n\r\n// custom event\r\nexport const EVENT_PREFIX = \"dnd-poly-\";\r\nexport const EVENT_DRAG_DRAGSTART_PENDING = EVENT_PREFIX + \"dragstart-pending\";\r\nexport const EVENT_DRAG_DRAGSTART_CANCEL = EVENT_PREFIX + \"dragstart-cancel\";\r\n\r\n// defines the array indexes to access string in ALLOWED_EFFECTS\r\nexport const enum EFFECT_ALLOWED {\r\n    NONE = 0,\r\n    COPY = 1,\r\n    COPY_LINK = 2,\r\n    COPY_MOVE = 3,\r\n    LINK = 4,\r\n    LINK_MOVE = 5,\r\n    MOVE = 6,\r\n    ALL = 7\r\n}\r\n\r\n// contains all possible values of the effectAllowed property\r\nexport const ALLOWED_EFFECTS = [ \"none\", \"copy\", \"copyLink\", \"copyMove\", \"link\", \"linkMove\", \"move\", \"all\" ];\r\n\r\n// defines the array indexes to access string in DROP_EFFECTS\r\nexport const enum DROP_EFFECT {\r\n    NONE = 0,\r\n    COPY = 1,\r\n    MOVE = 2,\r\n    LINK = 3,\r\n}\r\n\r\n// contains all possible values of the dropEffect property\r\nexport const DROP_EFFECTS = [ \"none\", \"copy\", \"move\", \"link\" ];\r\n","export interface DetectedFeatures {\r\n    draggable:boolean;\r\n    dragEvents:boolean;\r\n    userAgentSupportingNativeDnD:boolean;\r\n}\r\n\r\nexport function detectFeatures():DetectedFeatures {\r\n\r\n    let features:DetectedFeatures = {\r\n        dragEvents: (\"ondragstart\" in document.documentElement),\r\n        draggable: (\"draggable\" in document.documentElement),\r\n        userAgentSupportingNativeDnD: undefined\r\n    };\r\n\r\n    const isBlinkEngine = !!((<any>window).chrome) || /chrome/i.test( navigator.userAgent );\r\n\r\n    features.userAgentSupportingNativeDnD = !(\r\n        // if is mobile safari or android browser -> no native dnd\r\n        (/iPad|iPhone|iPod|Android/.test( navigator.userAgent ))\r\n        || // OR\r\n        //if is blink(chrome/opera) with touch events enabled -> no native dnd\r\n        (isBlinkEngine && (\"ontouchstart\" in document.documentElement))\r\n    );\r\n\r\n    return features;\r\n}\r\n\r\nexport function supportsPassiveEventListener():boolean {\r\n\r\n    let supportsPassiveEventListeners = false;\r\n\r\n    // reference https://github.com/WICG/EventListenerOptions/blob/gh-pages/explainer.md\r\n    try {\r\n        let opts = Object.defineProperty( {}, \"passive\", {\r\n            get: function() {\r\n                supportsPassiveEventListeners = true;\r\n            }\r\n        } );\r\n        window.addEventListener( \"test\", null, opts );\r\n    }\r\n        // tslint:disable-next-line:no-empty\r\n    catch( e ) {\r\n    }\r\n\r\n    return supportsPassiveEventListeners;\r\n}\r\n","import { CLASS_DRAG_IMAGE_SNAPBACK } from \"./constants\";\r\nimport { supportsPassiveEventListener } from \"./feature-detection\";\r\n\r\n// evaluate once on startup\r\nconst supportsPassive = supportsPassiveEventListener();\r\n\r\nexport interface Point {\r\n    x:number;\r\n    y:number;\r\n}\r\n\r\nexport function isDOMElement( object:Element ) {\r\n    return object && object.tagName;\r\n}\r\n\r\nexport function addDocumentListener( ev:string, handler:EventListener, passive:boolean = true ) {\r\n    document.addEventListener( ev, handler, supportsPassive ? { passive: passive } : false );\r\n}\r\n\r\nexport function removeDocumentListener( ev:string, handler:EventListener ) {\r\n    document.removeEventListener( ev, handler );\r\n}\r\n\r\nexport function onEvt(el:EventTarget, event:string, handler:EventListener, capture:boolean = false) {\r\n\r\n    const options = supportsPassive ? {passive: true, capture: capture} : capture;\r\n\r\n    el.addEventListener(event, handler, options);\r\n\r\n    return {\r\n        off() {\r\n            el.removeEventListener(event, handler, options as any);\r\n        }\r\n    };\r\n}\r\n\r\nfunction prepareNodeCopyAsDragImage( srcNode:HTMLElement, dstNode:HTMLElement ) {\r\n\r\n    // Is this node an element?\r\n    if( srcNode.nodeType === 1 ) {\r\n\r\n        // Clone the style\r\n        const cs = getComputedStyle( srcNode );\r\n        for( let i = 0; i < cs.length; i++ ) {\r\n            const csName = cs[ i ];\r\n            dstNode.style.setProperty( csName, cs.getPropertyValue( csName ), cs.getPropertyPriority( csName ) );\r\n        }\r\n\r\n        // no interaction with the drag image, pls! this is also important to make the drag image transparent for hit-testing\r\n        // hit testing is done in the drag and drop iteration to find the element the user currently is hovering over while dragging.\r\n        // if pointer-events is not none or a browser does behave in an unexpected way than the hit test transparency on the drag image\r\n        // will break\r\n        dstNode.style.pointerEvents = \"none\";\r\n\r\n        // Remove any potential conflict attributes\r\n        dstNode.removeAttribute( \"id\" );\r\n        dstNode.removeAttribute( \"class\" );\r\n        dstNode.removeAttribute( \"draggable\" );\r\n\r\n        // canvas elements need special handling by copying canvas image data\r\n        if( dstNode.nodeName === \"CANVAS\" ) {\r\n\r\n            const canvasSrc = srcNode as HTMLCanvasElement;\r\n            const canvasDst = dstNode as HTMLCanvasElement;\r\n\r\n            const canvasSrcImgData = canvasSrc.getContext( \"2d\" ).getImageData( 0, 0, canvasSrc.width, canvasSrc.height );\r\n\r\n            canvasDst.getContext( \"2d\" ).putImageData( canvasSrcImgData, 0, 0 );\r\n        }\r\n    }\r\n\r\n    // Do the same for the children\r\n    if( srcNode.hasChildNodes() ) {\r\n\r\n        for( let i = 0; i < srcNode.childNodes.length; i++ ) {\r\n\r\n            prepareNodeCopyAsDragImage( <HTMLElement>srcNode.childNodes[ i ], <HTMLElement>dstNode.childNodes[ i ] );\r\n        }\r\n    }\r\n}\r\n\r\nexport function createDragImage( sourceNode:HTMLElement ):HTMLElement {\r\n\r\n    const dragImage = <HTMLElement>sourceNode.cloneNode( true );\r\n\r\n    // this removes any id's and stuff that could interfere with drag and drop\r\n    prepareNodeCopyAsDragImage( sourceNode, dragImage );\r\n\r\n    return dragImage;\r\n}\r\n\r\nfunction average( array:Array<number> ) {\r\n    if( array.length === 0 ) {\r\n        return 0;\r\n    }\r\n    return array.reduce( (function( s, v ) {\r\n        return v + s;\r\n    }), 0 ) / array.length;\r\n}\r\n\r\nexport function isTouchIdentifierContainedInTouchEvent( touchEvent:TouchEvent, touchIdentifier:number ) {\r\n    for( let i = 0; i < touchEvent.changedTouches.length; i++ ) {\r\n        const touch = touchEvent.changedTouches[ i ];\r\n        if( touch.identifier === touchIdentifier ) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\n/**\r\n * Calc center of polygon spanned by multiple touches in page (full page size, with hidden scrollable area) coordinates\r\n * or in viewport (screen coordinates) coordinates.\r\n */\r\nexport function updateCentroidCoordinatesOfTouchesIn( coordinateProp:\"page\" | \"client\", event:TouchEvent, outPoint:Point ):void {\r\n    const pageXs:Array<number> = [], pageYs:Array<number> = [];\r\n    for( let i = 0; i < event.touches.length; i++ ) {\r\n        const touch = event.touches[ i ];\r\n        pageXs.push( touch[ coordinateProp + \"X\" ] );\r\n        pageYs.push( touch[ coordinateProp + \"Y\" ] );\r\n    }\r\n    outPoint.x = average( pageXs );\r\n    outPoint.y = average( pageYs );\r\n}\r\n\r\n// cross-browser css transform property prefixes\r\nconst TRANSFORM_CSS_VENDOR_PREFIXES = [ \"\", \"-webkit-\" ];\r\n\r\nexport function extractTransformStyles( sourceNode:HTMLElement ):string[] {\r\n\r\n    return TRANSFORM_CSS_VENDOR_PREFIXES.map( function( prefix:string ) {\r\n\r\n        let transform = sourceNode.style[ prefix + \"transform\" ];\r\n\r\n        if( !transform || transform === \"none\" ) {\r\n            return \"\";\r\n        }\r\n\r\n        // removes translate(x,y)\r\n        return transform.replace( /translate\\(\\D*\\d+[^,]*,\\D*\\d+[^,]*\\)\\s*/g, \"\" );\r\n    } );\r\n}\r\n\r\nexport function translateElementToPoint( element:HTMLElement, pnt:Point, originalTransforms:string[], offset?:Point, centerOnCoordinates = true ):void {\r\n\r\n    let x = pnt.x, y = pnt.y;\r\n\r\n    if( offset ) {\r\n        x += offset.x;\r\n        y += offset.y;\r\n    }\r\n\r\n    if( centerOnCoordinates ) {\r\n        x -= (parseInt( <any>element.offsetWidth, 10 ) / 2);\r\n        y -= (parseInt( <any>element.offsetHeight, 10 ) / 2);\r\n    }\r\n\r\n    // using translate3d for max performance\r\n    const translate = \"translate3d(\" + x + \"px,\" + y + \"px, 0)\";\r\n\r\n    for( let i = 0; i < TRANSFORM_CSS_VENDOR_PREFIXES.length; i++ ) {\r\n        const transformProp = TRANSFORM_CSS_VENDOR_PREFIXES[ i ] + \"transform\";\r\n        element.style[ transformProp ] = translate + \" \" + originalTransforms[ i ];\r\n    }\r\n}\r\n\r\n/**\r\n * calculates the coordinates of the drag source and transitions the drag image to those coordinates.\r\n * the drag operation is finished after the transition has ended.\r\n */\r\nexport function applyDragImageSnapback( sourceEl:HTMLElement, dragImage:HTMLElement, dragImageTransforms:string[], transitionEndCb:Function ):void {\r\n\r\n    const cs = getComputedStyle( sourceEl );\r\n\r\n    if( cs.visibility === \"hidden\" || cs.display === \"none\" ) {\r\n        console.log( \"dnd-poly: source node is not visible. skipping snapback transition.\" );\r\n        // shortcut to end the drag operation\r\n        transitionEndCb();\r\n        return;\r\n    }\r\n    // add class containing transition rules\r\n    dragImage.classList.add( CLASS_DRAG_IMAGE_SNAPBACK );\r\n\r\n    const csDragImage = getComputedStyle( dragImage );\r\n    const durationInS = parseFloat( csDragImage.transitionDuration );\r\n    if( isNaN( durationInS ) || durationInS === 0 ) {\r\n        console.log( \"dnd-poly: no transition used - skipping snapback\" );\r\n        transitionEndCb();\r\n        return;\r\n    }\r\n\r\n    console.log( \"dnd-poly: starting dragimage snap back\" );\r\n\r\n    // calc source node position\r\n    const rect = sourceEl.getBoundingClientRect();\r\n\r\n    const pnt:Point = {\r\n        x: rect.left,\r\n        y: rect.top\r\n    };\r\n\r\n    // add scroll offset of document\r\n    pnt.x += (document.body.scrollLeft || document.documentElement.scrollLeft);\r\n    pnt.y += (document.body.scrollTop || document.documentElement.scrollTop);\r\n\r\n    //TODO this sometimes fails to calculate the correct origin position.. find out when exactly and how to detect\r\n    pnt.x -= parseInt( cs.marginLeft, 10 );\r\n    pnt.y -= parseInt( cs.marginTop, 10 );\r\n\r\n    const delayInS = parseFloat( csDragImage.transitionDelay );\r\n    const durationInMs = Math.round( (durationInS + delayInS) * 1000 );\r\n\r\n    // apply the translate\r\n    translateElementToPoint( dragImage, pnt, dragImageTransforms, undefined, false );\r\n\r\n    setTimeout( transitionEndCb, durationInMs );\r\n}\r\n","import { ALLOWED_EFFECTS, DROP_EFFECT, DROP_EFFECTS } from \"./constants\";\r\n\r\n/**\r\n * Polyfills https://html.spec.whatwg.org/multipage/interaction.html#drag-data-store-mode\r\n */\r\nexport const enum DragDataStoreMode {\r\n    _DISCONNECTED, // adding an extra mode here because we need a special state to disconnect the data store from dataTransfer instance\r\n    READONLY,\r\n    READWRITE,\r\n    PROTECTED\r\n}\r\n\r\n/**\r\n * Polyfills https://html.spec.whatwg.org/multipage/interaction.html#the-drag-data-store\r\n */\r\nexport interface DragDataStore {\r\n    mode:DragDataStoreMode;\r\n    data:{ [type:string]:any };\r\n    types:Array<string>;\r\n    effectAllowed:string;\r\n}\r\n\r\n/**\r\n * Polyfills https://html.spec.whatwg.org/multipage/interaction.html#datatransfer\r\n */\r\nexport class DataTransfer {\r\n\r\n    private _dropEffect:string = DROP_EFFECTS[ DROP_EFFECT.NONE ];\r\n\r\n    public get dropEffect() {\r\n        return this._dropEffect;\r\n    }\r\n\r\n    //public get files():FileList {\r\n    //    return undefined;\r\n    //}\r\n    //\r\n    //public get items():DataTransferItemList {\r\n    //    return undefined;\r\n    //}\r\n\r\n    public set dropEffect( value ) {\r\n        if( this._dataStore.mode !== DragDataStoreMode._DISCONNECTED\r\n            && ALLOWED_EFFECTS.indexOf( value ) > -1 ) {\r\n            this._dropEffect = value;\r\n        }\r\n    }\r\n\r\n    public get types():ReadonlyArray<string> {\r\n        if( this._dataStore.mode !== DragDataStoreMode._DISCONNECTED ) {\r\n            return Object.freeze( this._dataStore.types );\r\n        }\r\n    }\r\n\r\n    public get effectAllowed() {\r\n        return this._dataStore.effectAllowed;\r\n    }\r\n\r\n    public set effectAllowed( value ) {\r\n        if( this._dataStore.mode === DragDataStoreMode.READWRITE\r\n            && ALLOWED_EFFECTS.indexOf( value ) > -1 ) {\r\n            this._dataStore.effectAllowed = value;\r\n        }\r\n    }\r\n\r\n    constructor( private _dataStore:DragDataStore,\r\n                 private _setDragImageHandler:( image:Element, x:number, y:number ) => void ) {\r\n    }\r\n\r\n    public setData( type:string, data:string ):void {\r\n        if( this._dataStore.mode === DragDataStoreMode.READWRITE ) {\r\n\r\n            if( type.indexOf( \" \" ) > -1 ) {\r\n                throw new Error( \"illegal arg: type contains space\" );\r\n            }\r\n\r\n            this._dataStore.data[ type ] = data;\r\n\r\n            if( this._dataStore.types.indexOf( type ) === -1 ) {\r\n                this._dataStore.types.push( type );\r\n            }\r\n        }\r\n    }\r\n\r\n    public getData( type:string ):string {\r\n        if( this._dataStore.mode === DragDataStoreMode.READONLY\r\n            || this._dataStore.mode === DragDataStoreMode.READWRITE ) {\r\n            return this._dataStore.data[ type ] || \"\";\r\n        }\r\n    }\r\n\r\n    public clearData( format?:string ):void {\r\n        if( this._dataStore.mode === DragDataStoreMode.READWRITE ) {\r\n            // delete data for format\r\n            if( format && this._dataStore.data[ format ] ) {\r\n                delete this._dataStore.data[ format ];\r\n                var index = this._dataStore.types.indexOf( format );\r\n                if( index > -1 ) {\r\n                    this._dataStore.types.splice( index, 1 );\r\n                }\r\n                return;\r\n            }\r\n            // delete all data\r\n            this._dataStore.data = {};\r\n            this._dataStore.types = [];\r\n        }\r\n    }\r\n\r\n    public setDragImage( image:Element, x:number, y:number ):void {\r\n        if( this._dataStore.mode === DragDataStoreMode.READWRITE ) {\r\n            this._setDragImageHandler( image, x, y );\r\n        }\r\n    }\r\n}\r\n","import { ALLOWED_EFFECTS, DROP_EFFECT, DROP_EFFECTS, EFFECT_ALLOWED } from \"./constants\";\r\nimport { DataTransfer, DragDataStore, DragDataStoreMode } from \"./drag-data-store\";\r\n\r\n/**\r\n * Search for a possible draggable item upon an event that can initialize a drag operation.\r\n * Can be overridden in polyfill config.\r\n */\r\nexport function tryFindDraggableTarget( event:TouchEvent ):HTMLElement | undefined {\r\n\r\n    //1. Determine what is being dragged, as follows:\r\n\r\n    // THIS IS SKIPPED SINCE SUPPORT IS ONLY AVAILABLE FOR DOM ELEMENTS\r\n    // If the drag operation was invoked on a selection, then it is the selection that is being dragged.\r\n    //if( (<Element>event.target).nodeType === 3 ) {\r\n    //\r\n    //    config.log( \"drag on text\" );\r\n    //    return <Element>event.target;\r\n    //}\r\n    //Otherwise, if the drag operation was invoked on a Document, it is the first element, going up the ancestor chain, starting at the node that the\r\n    // user tried to drag, that has the IDL attribute draggable set to true.\r\n    //else {\r\n\r\n    let el = <HTMLElement>event.target;\r\n\r\n    do {\r\n        if( el.draggable === false ) {\r\n            continue;\r\n        }\r\n        if( el.draggable === true ) {\r\n            return el;\r\n        }\r\n        if( el.getAttribute\r\n            && el.getAttribute( \"draggable\" ) === \"true\" ) {\r\n            return el;\r\n        }\r\n    } while( (el = <HTMLElement>el.parentNode) && el !== document.body );\r\n}\r\n\r\n/**\r\n * Implements \"6.\" in the processing steps defined for a dnd event\r\n * https://html.spec.whatwg.org/multipage/interaction.html#dragevent\r\n */\r\nexport function determineDropEffect( effectAllowed:string, sourceNode:Element ) {\r\n\r\n    // uninitialized\r\n    if( !effectAllowed ) {\r\n\r\n        // THIS IS SKIPPED SINCE SUPPORT IS ONLY AVAILABLE FOR DOM ELEMENTS\r\n        //if( sourceNode.nodeType === 1 ) {\r\n        //\r\n        //return \"move\";\r\n        //}\r\n\r\n        // link\r\n        if( sourceNode.nodeType === 3 && (<HTMLElement>sourceNode).tagName === \"A\" ) {\r\n            return DROP_EFFECTS[ DROP_EFFECT.LINK ];\r\n        }\r\n\r\n        // copy\r\n        return DROP_EFFECTS[ DROP_EFFECT.COPY ];\r\n    }\r\n\r\n    // none\r\n    if( effectAllowed === ALLOWED_EFFECTS[ EFFECT_ALLOWED.NONE ] ) {\r\n        return DROP_EFFECTS[ DROP_EFFECT.NONE ];\r\n    }\r\n    // copy or all\r\n    if( effectAllowed.indexOf( ALLOWED_EFFECTS[ EFFECT_ALLOWED.COPY ] ) === 0 || effectAllowed === ALLOWED_EFFECTS[ EFFECT_ALLOWED.ALL ] ) {\r\n        return DROP_EFFECTS[ DROP_EFFECT.COPY ];\r\n    }\r\n    // link\r\n    if( effectAllowed.indexOf( ALLOWED_EFFECTS[ EFFECT_ALLOWED.LINK ] ) === 0 ) {\r\n        return DROP_EFFECTS[ DROP_EFFECT.LINK ];\r\n    }\r\n    // move\r\n    if( effectAllowed === ALLOWED_EFFECTS[ EFFECT_ALLOWED.MOVE ] ) {\r\n        return DROP_EFFECTS[ DROP_EFFECT.MOVE ];\r\n    }\r\n\r\n    // copy\r\n    return DROP_EFFECTS[ DROP_EFFECT.COPY ];\r\n}\r\n\r\nfunction createDragEventFromTouch( targetElement:Element,\r\n                                   e:TouchEvent,\r\n                                   type:string,\r\n                                   cancelable:boolean,\r\n                                   window:Window,\r\n                                   dataTransfer:DataTransfer,\r\n                                   relatedTarget:Element = null ) {\r\n\r\n    const touch:Touch = e.changedTouches[ 0 ];\r\n\r\n    const dndEvent:DragEvent = new Event( type, {\r\n        bubbles: true,\r\n        cancelable: cancelable\r\n    } ) as DragEvent;\r\n\r\n    // cast our polyfill\r\n    (dndEvent as any).dataTransfer = dataTransfer as any;\r\n    (dndEvent as any).relatedTarget = relatedTarget;\r\n\r\n    // set the coordinates\r\n    (dndEvent as any).screenX = touch.screenX;\r\n    (dndEvent as any).screenY = touch.screenY;\r\n    (dndEvent as any).clientX = touch.clientX;\r\n    (dndEvent as any).clientY = touch.clientY;\r\n    (dndEvent as any).pageX = touch.pageX;\r\n    (dndEvent as any).pageY = touch.pageY;\r\n\r\n    const targetRect = targetElement.getBoundingClientRect();\r\n    (dndEvent as any).offsetX = dndEvent.clientX - targetRect.left;\r\n    (dndEvent as any).offsetY = dndEvent.clientY - targetRect.top;\r\n\r\n    return dndEvent;\r\n}\r\n\r\n/**\r\n * Reference https://html.spec.whatwg.org/multipage/interaction.html#dndevents\r\n */\r\nexport function dispatchDragEvent( dragEvent:string,\r\n                                   targetElement:Element,\r\n                                   touchEvent:TouchEvent,\r\n                                   dataStore:DragDataStore,\r\n                                   dataTransfer:DataTransfer,\r\n                                   cancelable:boolean = true,\r\n                                   relatedTarget:Element | null = null ):boolean {\r\n\r\n    console.log( \"dnd-poly: dispatching \" + dragEvent );\r\n\r\n    // if( DEBUG ) {\r\n    //     const debug_class = CLASS_PREFIX + \"debug\",\r\n    //         debug_class_event_target = CLASS_PREFIX + \"event-target\",\r\n    //         debug_class_event_related_target = CLASS_PREFIX + \"event-related-target\";\r\n    //     targetElement.classList.add( debug_class );\r\n    //     targetElement.classList.add( debug_class_event_target );\r\n    //     if( relatedTarget ) {\r\n    //         relatedTarget.classList.add( debug_class );\r\n    //         relatedTarget.classList.add( debug_class_event_related_target );\r\n    //     }\r\n    // }\r\n\r\n    const leaveEvt = createDragEventFromTouch( targetElement, touchEvent, dragEvent, cancelable, document.defaultView, dataTransfer, relatedTarget );\r\n    const cancelled = !targetElement.dispatchEvent( leaveEvt );\r\n\r\n    dataStore.mode = DragDataStoreMode._DISCONNECTED;\r\n\r\n    // if( DEBUG ) {\r\n    //     const debug_class_event_target = CLASS_PREFIX + \"event-target\",\r\n    //         debug_class_event_related_target = CLASS_PREFIX + \"event-related-target\";\r\n    //     targetElement.classList.remove( debug_class_event_target );\r\n    //     if( relatedTarget ) {\r\n    //         relatedTarget.classList.remove( debug_class_event_related_target );\r\n    //     }\r\n    // }\r\n\r\n    return cancelled;\r\n}\r\n\r\n/**\r\n * according to https://html.spec.whatwg.org/multipage/interaction.html#drag-and-drop-processing-model\r\n */\r\nexport function determineDragOperation( effectAllowed:string, dropEffect:string ):string {\r\n\r\n    // unitialized or all\r\n    if( !effectAllowed || effectAllowed === ALLOWED_EFFECTS[ 7 ] ) {\r\n        return dropEffect;\r\n    }\r\n\r\n    if( dropEffect === DROP_EFFECTS[ DROP_EFFECT.COPY ] ) {\r\n        if( effectAllowed.indexOf( DROP_EFFECTS[ DROP_EFFECT.COPY ] ) === 0 ) {\r\n            return DROP_EFFECTS[ DROP_EFFECT.COPY ];\r\n        }\r\n    }\r\n    else if( dropEffect === DROP_EFFECTS[ DROP_EFFECT.LINK ] ) {\r\n        if( effectAllowed.indexOf( DROP_EFFECTS[ DROP_EFFECT.LINK ] ) === 0 || effectAllowed.indexOf( \"Link\" ) > -1 ) {\r\n            return DROP_EFFECTS[ DROP_EFFECT.LINK ];\r\n        }\r\n    }\r\n    else if( dropEffect === DROP_EFFECTS[ DROP_EFFECT.MOVE ] ) {\r\n        if( effectAllowed.indexOf( DROP_EFFECTS[ DROP_EFFECT.MOVE ] ) === 0 || effectAllowed.indexOf( \"Move\" ) > -1 ) {\r\n            return DROP_EFFECTS[ DROP_EFFECT.MOVE ];\r\n        }\r\n    }\r\n\r\n    return DROP_EFFECTS[ DROP_EFFECT.NONE ];\r\n}\r\n","import { Config } from \"../index\";\r\nimport {\r\n    CLASS_DRAG_IMAGE, CLASS_DRAG_OPERATION_ICON, CLASS_PREFIX, DROP_EFFECT, DROP_EFFECTS\r\n} from \"./constants\";\r\nimport {\r\n    addDocumentListener, applyDragImageSnapback, extractTransformStyles, isDOMElement,\r\n    isTouchIdentifierContainedInTouchEvent, Point, removeDocumentListener, translateElementToPoint,\r\n    updateCentroidCoordinatesOfTouchesIn\r\n} from \"./dom-utils\";\r\nimport { DataTransfer, DragDataStore, DragDataStoreMode } from \"./drag-data-store\";\r\nimport { determineDragOperation, determineDropEffect, dispatchDragEvent } from \"./drag-utils\";\r\n\r\n/**\r\n * For tracking the different states of a drag operation.\r\n */\r\nexport const enum DragOperationState {\r\n    // initial state of a controller, if no movement is detected the operation ends with this state\r\n    POTENTIAL,\r\n    // after movement is detected the drag operation starts and keeps this state until it ends\r\n    STARTED,\r\n    // when the drag operation ended normally\r\n    ENDED,\r\n    // when the drag operation ended with a cancelled input event\r\n    CANCELLED\r\n}\r\n\r\n/**\r\n * Aims to implement the HTML5 d'n'd spec (https://html.spec.whatwg.org/multipage/interaction.html#dnd) as close as it can get.\r\n * Note that all props that are private should start with an underscore to enable better minification.\r\n *\r\n * TODO remove lengthy spec comments in favor of short references to the spec\r\n */\r\nexport class DragOperationController {\r\n\r\n    private _dragOperationState:DragOperationState = DragOperationState.POTENTIAL;\r\n\r\n    private _dragImage:HTMLElement;\r\n    private _dragImageTransforms:string[];\r\n    private _dragImagePageCoordinates:Point; // the current page coordinates of the dragImage\r\n    private _dragImageOffset:Point; // offset of the drag image relative to the coordinates\r\n\r\n    private _currentHotspotCoordinates:Point;    // the point relative to viewport for determining the immediate user selection\r\n\r\n    private _immediateUserSelection:HTMLElement = null;  // the element the user currently hovers while dragging\r\n    private _currentDropTarget:HTMLElement = null;   // the element that was selected as a valid drop target by the d'n'd operation\r\n\r\n    private _dragDataStore:DragDataStore;\r\n    private _dataTransfer:DataTransfer;\r\n\r\n    private _currentDragOperation:string;    // the current drag operation set according to the d'n'd processing model\r\n\r\n    private _initialTouch:Touch;  // the identifier for the touch that initiated the drag operation\r\n    private _touchMoveHandler:EventListener;\r\n    private _touchEndOrCancelHandler:EventListener;\r\n    private _lastTouchEvent:TouchEvent;\r\n\r\n    private _iterationLock:boolean;\r\n    private _iterationIntervalId:number;\r\n\r\n    constructor( private _initialEvent:TouchEvent,\r\n                 private _config:Config,\r\n                 private _sourceNode:HTMLElement,\r\n                 private _dragOperationEndedCb:( config:Config, event:TouchEvent, state:DragOperationState ) => void ) {\r\n\r\n        console.log( \"dnd-poly: setting up potential drag operation..\" );\r\n\r\n        this._lastTouchEvent = _initialEvent;\r\n        this._initialTouch = _initialEvent.changedTouches[ 0 ];\r\n\r\n        // create bound event listeners\r\n        this._touchMoveHandler = this._onTouchMove.bind( this );\r\n        this._touchEndOrCancelHandler = this._onTouchEndOrCancel.bind( this );\r\n        addDocumentListener( \"touchmove\", this._touchMoveHandler, false );\r\n        addDocumentListener( \"touchend\", this._touchEndOrCancelHandler, false );\r\n        addDocumentListener( \"touchcancel\", this._touchEndOrCancelHandler, false );\r\n\r\n        // the only thing we do is setup the touch listeners. if drag will really start is decided in touch move handler.\r\n\r\n        //<spec>\r\n\r\n        // THIS IS SKIPPED SINCE SUPPORT IS ONLY AVAILABLE FOR DOM ELEMENTS\r\n        // 3. Establish which DOM node is the source node, as follows:\r\n        // If it is a selection that is being dragged, then the source node is the text node that the user started the drag on (typically the text node\r\n        // that the user originally clicked). If the user did not specify a particular node, for example if the user just told the user agent to begin\r\n        // a drag of \"the selection\", then the source node is the first text node containing a part of the selection.  Otherwise, if it is an element\r\n        // that is being dragged, then the source node is the element that is being dragged.  Otherwise, the source node is part of another document or\r\n        // application. When this specification requires that an event be dispatched at the source node in this case, the user agent must instead\r\n        // follow the platform-specific conventions relevant to that situation.\r\n\r\n        // THIS IS SKIPPED SINCE SUPPORT IS ONLY AVAILABLE FOR DOM ELEMENTS\r\n        // 4. Determine the list of dragged nodes, as follows:\r\n\r\n        //    If it is a selection that is being dragged, then the list of dragged nodes contains, in tree order, every node that is partially or\r\n        // completely included in the selection (including all their ancestors).\r\n\r\n        //    Otherwise, the list of dragged nodes contains only the source node, if any.\r\n\r\n        // THIS IS SKIPPED SINCE SUPPORT IS ONLY AVAILABLE FOR DOM ELEMENTS\r\n        // 5. If it is a selection that is being dragged, then add an item to the drag data store item list, with its properties set as follows:\r\n\r\n        //The drag data item type string\r\n        //\"text/plain\"\r\n        //The drag data item kind\r\n        //Plain Unicode string\r\n        //The actual data\r\n        //The text of the selection\r\n        //Otherwise, if any files are being dragged, then add one item per file to the drag data store item list, with their properties set as follows:\r\n        //\r\n        //The drag data item type string\r\n        //The MIME type of the file, if known, or \"application/octet-stream\" otherwise.\r\n        //    The drag data item kind\r\n        //File\r\n        //The actual data\r\n        //The file's contents and name.\r\n        //Dragging files can currently only happen from outside a browsing context, for example from a file system manager application.\r\n        //\r\n        //    If the drag initiated outside of the application, the user agent must add items to the drag data store item list as appropriate for the data\r\n        // being dragged, honoring platform conventions where appropriate; however, if the platform conventions do not use MIME types to label dragged\r\n        // data, the user agent must make a best-effort attempt to map the types to MIME types, and, in any case, all the drag data item type strings must\r\n        // be converted to ASCII lowercase.  Perform drag-and-drop initialization steps defined in any other applicable specifications.\r\n\r\n        //</spec>\r\n    }\r\n\r\n    //<editor-fold desc=\"setup/teardown\">\r\n\r\n    /**\r\n     * Setup dragImage, input listeners and the drag\r\n     * and drop process model iteration interval.\r\n     */\r\n    private _setup():boolean {\r\n        console.log( \"dnd-poly: starting drag and drop operation\" );\r\n\r\n        this._dragOperationState = DragOperationState.STARTED;\r\n\r\n        this._currentDragOperation = DROP_EFFECTS[ DROP_EFFECT.NONE ];\r\n\r\n        this._dragDataStore = {\r\n            data: {},\r\n            effectAllowed: undefined,\r\n            mode: DragDataStoreMode.PROTECTED,\r\n            types: [],\r\n        };\r\n\r\n        this._currentHotspotCoordinates = {\r\n            x: null,\r\n            y: null\r\n        };\r\n\r\n        this._dragImagePageCoordinates = {\r\n            x: null,\r\n            y: null\r\n        };\r\n\r\n        let dragImageSrc:HTMLElement = this._sourceNode;\r\n\r\n        this._dataTransfer = new DataTransfer( this._dragDataStore, ( element:HTMLElement, x:number, y:number ) => {\r\n\r\n            dragImageSrc = element;\r\n\r\n            if( typeof x === \"number\" || typeof y === \"number\" ) {\r\n                this._dragImageOffset = {\r\n                    x: x || 0,\r\n                    y: y || 0\r\n                };\r\n            }\r\n        } );\r\n\r\n        // 9. Fire a DND event named dragstart at the source node.\r\n        this._dragDataStore.mode = DragDataStoreMode.READWRITE;\r\n        this._dataTransfer.dropEffect = DROP_EFFECTS[ DROP_EFFECT.NONE ];\r\n        if( dispatchDragEvent( \"dragstart\", this._sourceNode, this._lastTouchEvent, this._dragDataStore, this._dataTransfer ) ) {\r\n            console.log( \"dnd-poly: dragstart cancelled\" );\r\n            // dragstart has been prevented -> cancel d'n'd\r\n            this._dragOperationState = DragOperationState.CANCELLED;\r\n            this._cleanup();\r\n            return false;\r\n        }\r\n\r\n        updateCentroidCoordinatesOfTouchesIn( \"page\", this._lastTouchEvent, this._dragImagePageCoordinates );\r\n        const dragImage = this._config.dragImageSetup( dragImageSrc );\r\n        this._dragImageTransforms = extractTransformStyles( dragImage );\r\n        // set layout styles for freely moving it around\r\n        dragImage.style.position = \"absolute\";\r\n        dragImage.style.left = \"0px\";\r\n        dragImage.style.top = \"0px\";\r\n        // on top of all\r\n        dragImage.style.zIndex = \"999999\";\r\n\r\n        // add polyfill class for default styling\r\n        dragImage.classList.add( CLASS_DRAG_IMAGE );\r\n        dragImage.classList.add( CLASS_DRAG_OPERATION_ICON );\r\n        this._dragImage = dragImage;\r\n\r\n        if( !this._dragImageOffset ) {\r\n\r\n            // apply specific offset\r\n            if( this._config.dragImageOffset ) {\r\n\r\n                this._dragImageOffset = {\r\n                    x: this._config.dragImageOffset.x,\r\n                    y: this._config.dragImageOffset.y\r\n                };\r\n            }\r\n            // center drag image on touch coordinates\r\n            else if( this._config.dragImageCenterOnTouch ) {\r\n\r\n                const cs = getComputedStyle( dragImageSrc );\r\n                this._dragImageOffset = {\r\n                    x: 0 - parseInt( cs.marginLeft, 10 ),\r\n                    y: 0 - parseInt( cs.marginTop, 10 )\r\n                };\r\n            }\r\n            // by default initialize drag image offset the same as desktop\r\n            else {\r\n\r\n                const targetRect = dragImageSrc.getBoundingClientRect();\r\n                const cs = getComputedStyle( dragImageSrc );\r\n                this._dragImageOffset = {\r\n                    x: targetRect.left - this._initialTouch.clientX - parseInt( cs.marginLeft, 10 ) + targetRect.width / 2,\r\n                    y: targetRect.top - this._initialTouch.clientY - parseInt( cs.marginTop, 10 ) + targetRect.height / 2\r\n                };\r\n            }\r\n        }\r\n\r\n        translateElementToPoint( this._dragImage, this._dragImagePageCoordinates, this._dragImageTransforms, this._dragImageOffset, this._config.dragImageCenterOnTouch );\r\n        document.body.appendChild( this._dragImage );\r\n\r\n        // 10. Initiate the drag-and-drop operation in a manner consistent with platform conventions, and as described below.\r\n        this._iterationIntervalId = window.setInterval( () => {\r\n\r\n            // If the user agent is still performing the previous iteration of the sequence (if any) when the next iteration becomes due,\r\n            // abort these steps for this iteration (effectively \"skipping missed frames\" of the drag-and-drop operation).\r\n            if( this._iterationLock ) {\r\n                console.log( \"dnd-poly: iteration skipped because previous iteration hast not yet finished.\" );\r\n                return;\r\n            }\r\n            this._iterationLock = true;\r\n\r\n            this._dragAndDropProcessModelIteration();\r\n\r\n            this._iterationLock = false;\r\n        }, this._config.iterationInterval );\r\n\r\n        return true;\r\n    }\r\n\r\n    private _cleanup() {\r\n\r\n        console.log( \"dnd-poly: cleanup\" );\r\n\r\n        if( this._iterationIntervalId ) {\r\n            clearInterval( this._iterationIntervalId );\r\n            this._iterationIntervalId = null;\r\n        }\r\n\r\n        removeDocumentListener( \"touchmove\", this._touchMoveHandler );\r\n        removeDocumentListener( \"touchend\", this._touchEndOrCancelHandler );\r\n        removeDocumentListener( \"touchcancel\", this._touchEndOrCancelHandler );\r\n\r\n        if( this._dragImage ) {\r\n            this._dragImage.parentNode.removeChild( this._dragImage );\r\n            this._dragImage = null;\r\n        }\r\n\r\n        this._dragOperationEndedCb( this._config, this._lastTouchEvent, this._dragOperationState );\r\n    }\r\n\r\n    //</editor-fold>\r\n\r\n    //<editor-fold desc=\"touch handlers\">\r\n\r\n    private _onTouchMove( event:TouchEvent ) {\r\n\r\n        // filter unrelated touches\r\n        if( isTouchIdentifierContainedInTouchEvent( event, this._initialTouch.identifier ) === false ) {\r\n            return;\r\n        }\r\n\r\n        // update the reference to the last received touch event\r\n        this._lastTouchEvent = event;\r\n\r\n        // drag operation did not start yet but on movement it should start\r\n        if( this._dragOperationState === DragOperationState.POTENTIAL ) {\r\n\r\n            let startDrag:boolean;\r\n\r\n            // is a lifecycle hook present?\r\n            if( this._config.dragStartConditionOverride ) {\r\n\r\n                try {\r\n                    startDrag = this._config.dragStartConditionOverride( event );\r\n                }\r\n                catch( e ) {\r\n                    console.error( \"dnd-poly: error in dragStartConditionOverride hook: \" + e );\r\n                    startDrag = false;\r\n                }\r\n            }\r\n            else {\r\n\r\n                // by default only allow a single moving finger to initiate a drag operation\r\n                startDrag = (event.touches.length === 1);\r\n            }\r\n\r\n            if( !startDrag ) {\r\n\r\n                this._cleanup();\r\n                return;\r\n            }\r\n\r\n            // setup will return true when drag operation starts\r\n            if( this._setup() === true ) {\r\n\r\n                // prevent scrolling when drag operation starts\r\n                this._initialEvent.preventDefault();\r\n                event.preventDefault();\r\n            }\r\n\r\n            return;\r\n        }\r\n\r\n        console.log( \"dnd-poly: moving draggable..\" );\r\n\r\n        // we emulate d'n'd so we dont want any defaults to apply\r\n        event.preventDefault();\r\n\r\n        // populate shared coordinates from touch event\r\n        updateCentroidCoordinatesOfTouchesIn( \"client\", event, this._currentHotspotCoordinates );\r\n        updateCentroidCoordinatesOfTouchesIn( \"page\", event, this._dragImagePageCoordinates );\r\n\r\n        if( this._config.dragImageTranslateOverride ) {\r\n\r\n            try {\r\n\r\n                let handledDragImageTranslate = false;\r\n\r\n                this._config.dragImageTranslateOverride(\r\n                    event,\r\n                    {\r\n                        x: this._currentHotspotCoordinates.x,\r\n                        y: this._currentHotspotCoordinates.y\r\n                    },\r\n                    this._immediateUserSelection,\r\n                    ( offsetX:number, offsetY:number ) => {\r\n\r\n                        // preventing translation of drag image when there was a drag operation cleanup meanwhile\r\n                        if( !this._dragImage ) {\r\n                            return;\r\n                        }\r\n\r\n                        handledDragImageTranslate = true;\r\n\r\n                        this._currentHotspotCoordinates.x += offsetX;\r\n                        this._currentHotspotCoordinates.y += offsetY;\r\n                        this._dragImagePageCoordinates.x += offsetX;\r\n                        this._dragImagePageCoordinates.y += offsetY;\r\n\r\n                        translateElementToPoint(\r\n                            this._dragImage,\r\n                            this._dragImagePageCoordinates,\r\n                            this._dragImageTransforms,\r\n                            this._dragImageOffset,\r\n                            this._config.dragImageCenterOnTouch\r\n                        );\r\n                    }\r\n                );\r\n\r\n                if( handledDragImageTranslate ) {\r\n                    return;\r\n                }\r\n            }\r\n            catch( e ) {\r\n                console.log( \"dnd-poly: error in dragImageTranslateOverride hook: \" + e );\r\n            }\r\n        }\r\n\r\n        translateElementToPoint( this._dragImage, this._dragImagePageCoordinates, this._dragImageTransforms, this._dragImageOffset, this._config.dragImageCenterOnTouch );\r\n    }\r\n\r\n    private _onTouchEndOrCancel( event:TouchEvent ) {\r\n\r\n        // filter unrelated touches\r\n        if( isTouchIdentifierContainedInTouchEvent( event, this._initialTouch.identifier ) === false ) {\r\n            return;\r\n        }\r\n\r\n        // let the dragImageTranslateOverride know that its over\r\n        if( this._config.dragImageTranslateOverride ) {\r\n            try {\r\n                /* tslint:disable */\r\n                this._config.dragImageTranslateOverride( undefined, undefined, undefined, function() {\r\n                } );\r\n            }\r\n            catch( e ) {\r\n                console.log( \"dnd-poly: error in dragImageTranslateOverride hook: \" + e );\r\n            }\r\n        }\r\n\r\n        // drag operation did not even start\r\n        if( this._dragOperationState === DragOperationState.POTENTIAL ) {\r\n            this._cleanup();\r\n            return;\r\n        }\r\n\r\n        // we emulate d'n'd so we dont want any defaults to apply\r\n        event.preventDefault();\r\n\r\n        this._dragOperationState = (event.type === \"touchcancel\") ? DragOperationState.CANCELLED : DragOperationState.ENDED;\r\n    }\r\n\r\n    //</editor-fold>\r\n\r\n    //<editor-fold desc=\"dnd spec logic\">\r\n\r\n    /**\r\n     * according to https://html.spec.whatwg.org/multipage/interaction.html#drag-and-drop-processing-model\r\n     */\r\n    private _dragAndDropProcessModelIteration():void {\r\n\r\n        // if( DEBUG ) {\r\n        //     var debug_class = CLASS_PREFIX + \"debug\",\r\n        //         debug_class_user_selection = CLASS_PREFIX + \"immediate-user-selection\",\r\n        //         debug_class_drop_target = CLASS_PREFIX + \"current-drop-target\";\r\n        // }\r\n\r\n        const previousDragOperation = this._currentDragOperation;\r\n\r\n        // Fire a DND event named drag event at the source node.\r\n        this._dragDataStore.mode = DragDataStoreMode.PROTECTED;\r\n        this._dataTransfer.dropEffect = DROP_EFFECTS[ DROP_EFFECT.NONE ];\r\n        const dragCancelled = dispatchDragEvent( \"drag\", this._sourceNode, this._lastTouchEvent, this._dragDataStore, this._dataTransfer );\r\n        if( dragCancelled ) {\r\n            console.log( \"dnd-poly: drag event cancelled.\" );\r\n            // If this event is canceled, the user agent must set the current drag operation to \"none\" (no drag operation).\r\n            this._currentDragOperation = DROP_EFFECTS[ DROP_EFFECT.NONE ];\r\n        }\r\n\r\n        // Otherwise, if the user ended the drag-and-drop operation (e.g. by releasing the mouse button in a mouse-driven drag-and-drop interface),\r\n        // or if the drag event was canceled, then this will be the last iteration.\r\n        if( dragCancelled || this._dragOperationState === DragOperationState.ENDED || this._dragOperationState === DragOperationState.CANCELLED ) {\r\n\r\n            const dragFailed = this._dragOperationEnded( this._dragOperationState );\r\n\r\n            // if drag failed transition snap back\r\n            if( dragFailed ) {\r\n\r\n                applyDragImageSnapback( this._sourceNode, this._dragImage, this._dragImageTransforms, () => {\r\n                    this._finishDragOperation();\r\n                } );\r\n                return;\r\n            }\r\n\r\n            // Otherwise immediately\r\n            // Fire a DND event named dragend at the source node.\r\n            this._finishDragOperation();\r\n            return;\r\n        }\r\n\r\n        // If the drag event was not canceled and the user has not ended the drag-and-drop operation,\r\n        // check the state of the drag-and-drop operation, as follows:\r\n        const newUserSelection:HTMLElement = <HTMLElement>this._config.elementFromPoint( this._currentHotspotCoordinates.x, this._currentHotspotCoordinates.y );\r\n\r\n        console.log( \"dnd-poly: new immediate user selection is: \" + newUserSelection );\r\n\r\n        const previousTargetElement = this._currentDropTarget;\r\n\r\n        // If the user is indicating a different immediate user selection than during the last iteration (or if this is the first iteration),\r\n        // and if this immediate user selection is not the same as the current target element,\r\n        // then fire a DND event named dragexit at the current target element,\r\n        // and then update the current target element as follows:\r\n        if( newUserSelection !== this._immediateUserSelection && newUserSelection !== this._currentDropTarget ) {\r\n\r\n            // if( DEBUG ) {\r\n            //\r\n            //     if( this._immediateUserSelection ) {\r\n            //         this._immediateUserSelection.classList.remove( debug_class_user_selection );\r\n            //     }\r\n            //\r\n            //     if( newUserSelection ) {\r\n            //         newUserSelection.classList.add( debug_class );\r\n            //         newUserSelection.classList.add( debug_class_user_selection );\r\n            //     }\r\n            // }\r\n\r\n            this._immediateUserSelection = newUserSelection;\r\n\r\n            if( this._currentDropTarget !== null ) {\r\n                this._dragDataStore.mode = DragDataStoreMode.PROTECTED;\r\n                this._dataTransfer.dropEffect = DROP_EFFECTS[ DROP_EFFECT.NONE ];\r\n                dispatchDragEvent( \"dragexit\", this._currentDropTarget, this._lastTouchEvent, this._dragDataStore, this._dataTransfer, false );\r\n            }\r\n\r\n            // If the new immediate user selection is null\r\n            if( this._immediateUserSelection === null ) {\r\n                //Set the current target element to null also.\r\n                this._currentDropTarget = this._immediateUserSelection;\r\n\r\n                console.log( \"dnd-poly: current drop target changed to null\" );\r\n            }\r\n            // THIS IS SKIPPED SINCE SUPPORT IS ONLY AVAILABLE FOR DOM ELEMENTS\r\n            // If the new immediate user selection is in a non-DOM document or application\r\n            // else if() {\r\n            //      Set the current target element to the immediate user selection.\r\n            //      this.currentDropTarget = this.immediateUserSelection;\r\n            //      return;\r\n            // }\r\n            // Otherwise\r\n            else {\r\n                // Fire a DND event named dragenter at the immediate user selection.\r\n                //the polyfill cannot determine if a handler even exists as browsers do to silently\r\n                // allow drop when no listener existed, so this event MUST be handled by the client\r\n                this._dragDataStore.mode = DragDataStoreMode.PROTECTED;\r\n                this._dataTransfer.dropEffect = determineDropEffect( this._dragDataStore.effectAllowed, this._sourceNode );\r\n                if( dispatchDragEvent( \"dragenter\", this._immediateUserSelection, this._lastTouchEvent, this._dragDataStore, this._dataTransfer ) ) {\r\n                    console.log( \"dnd-poly: dragenter default prevented\" );\r\n                    // If the event is canceled, then set the current target element to the immediate user selection.\r\n                    this._currentDropTarget = this._immediateUserSelection;\r\n                    this._currentDragOperation = determineDragOperation( this._dataTransfer.effectAllowed, this._dataTransfer.dropEffect );\r\n                }\r\n                // Otherwise, run the appropriate step from the following list:\r\n                else {\r\n\r\n                    // NO DROPZONE SUPPORT SINCE NATIVE IMPLEMENTATIONS IN BROWSERS ALSO DO NOT\r\n                    //console.log( \"dnd-poly: dragenter not prevented, searching for dropzone..\" );\r\n                    //var newTarget = DragOperationController.FindDropzoneElement( this.immediateUserSelection );\r\n\r\n                    // THIS IS SKIPPED SINCE SUPPORT IS ONLY AVAILABLE FOR DOM ELEMENTS\r\n                    // If the current target element is a text field (e.g. textarea, or an input element whose type attribute is in the Text state) or an\r\n                    // editable element, and the drag data store item list has an item with the drag data item type string \"text/plain\" and the drag data\r\n                    // item kind Plain Unicode string\r\n                    //if( ElementIsTextDropzone( this.immediateUserSelection, this.dragDataStore ) ) {\r\n                    //Set the current target element to the immediate user selection anyway.\r\n                    //this.currentDropTarget = this.immediateUserSelection;\r\n                    //}\r\n                    //else\r\n                    // If the current target element is an element with a dropzone attribute that matches the drag data store\r\n                    //if( newTarget === this.immediateUserSelection &&\r\n                    //    DragOperationController.GetOperationForMatchingDropzone( this.immediateUserSelection, this.dragDataStore ) !== \"none\" ) {\r\n                    // Set the current target element to the immediate user selection anyway.\r\n                    //    this.currentDropTarget = this.immediateUserSelection;\r\n                    //}\r\n                    // If the immediate user selection is an element that itself has an ancestor element\r\n                    // with a dropzone attribute that matches the drag data store\r\n                    // NO DROPZONE SUPPORT SINCE NATIVE IMPLEMENTATIONS IN BROWSERS ALSO DO NOT\r\n                    //else if( newTarget !== null && DragOperationController.GetOperationForMatchingDropzone( newTarget, this.dragDataStore ) ) {\r\n\r\n                    // If the immediate user selection is new target, then leave the current target element unchanged.\r\n\r\n                    // Otherwise, fire a DND event named dragenter at new target, with the current target element\r\n                    // as the specific related target. Then, set the current target element to new target,\r\n                    // regardless of whether that event was canceled or not.\r\n                    //this.dragenter( newTarget, this.currentDropTarget );\r\n                    //this.currentDropTarget = newTarget;\r\n                    //}\r\n                    // If the current target element is not the body element\r\n                    //else\r\n                    if( this._immediateUserSelection !== document.body ) {\r\n                        // Fire a DND event named dragenter at the body element, and set the current target element to the body element, regardless of\r\n                        // whether that event was canceled or not.\r\n                        // Note: If the body element is null, then the event will be fired at the Document object (as\r\n                        // required by the definition of the body element), but the current target element would be set to null, not the Document object.\r\n\r\n                        // We do not listen to what the spec says here because this results in doubled events on the body/document because if the first one\r\n                        // was not cancelled it will have bubbled up to the body already ;)\r\n                        //  this.dragenter( window.document.body );\r\n                        this._currentDropTarget = document.body;\r\n                    }\r\n                    // Otherwise\r\n                    //else {\r\n                    // leave the current drop target unchanged\r\n                    //}\r\n                }\r\n            }\r\n        }\r\n\r\n        // If the previous step caused the current target element to change,\r\n        // and if the previous target element was not null or a part of a non-DOM document,\r\n        // then fire a DND event named dragleave at the previous target element.\r\n        if( previousTargetElement !== this._currentDropTarget && (isDOMElement( previousTargetElement )) ) {\r\n\r\n            // if( DEBUG ) {\r\n            //     previousTargetElement.classList.remove( debug_class_drop_target );\r\n            // }\r\n\r\n            console.log( \"dnd-poly: current drop target changed.\" );\r\n\r\n            this._dragDataStore.mode = DragDataStoreMode.PROTECTED;\r\n            this._dataTransfer.dropEffect = DROP_EFFECTS[ DROP_EFFECT.NONE ];\r\n            dispatchDragEvent( \"dragleave\", previousTargetElement, this._lastTouchEvent, this._dragDataStore, this._dataTransfer, false, this._currentDropTarget );\r\n        }\r\n\r\n        // If the current target element is a DOM element, then fire a DND event named dragover at this current target element.\r\n        if( isDOMElement( this._currentDropTarget ) ) {\r\n\r\n            // if( DEBUG ) {\r\n            //     this._currentDropTarget.classList.add( debug_class );\r\n            //     this._currentDropTarget.classList.add( debug_class_drop_target );\r\n            // }\r\n\r\n            // If the dragover event is not canceled, run the appropriate step from the following list:\r\n            this._dragDataStore.mode = DragDataStoreMode.PROTECTED;\r\n            this._dataTransfer.dropEffect = determineDropEffect( this._dragDataStore.effectAllowed, this._sourceNode );\r\n            if( dispatchDragEvent( \"dragover\", this._currentDropTarget, this._lastTouchEvent, this._dragDataStore, this._dataTransfer ) === false ) {\r\n\r\n                console.log( \"dnd-poly: dragover not prevented on possible drop-target.\" );\r\n                // NO DROPZONE SUPPORT SINCE NATIVE IMPLEMENTATIONS IN BROWSERS ALSO DO NOT\r\n\r\n                // THIS IS SKIPPED SINCE SUPPORT IS ONLY AVAILABLE FOR DOM ELEMENTS\r\n                // If the current target element is a text field (e.g. textarea, or an input element whose type attribute is in the Text state) or\r\n                // an editable element, and the drag data store item list has an item with the drag data item type string \"text/plain\" and the drag\r\n                // data item kind Plain Unicode string\r\n                //if( ElementIsTextDropzone( this.currentDropTarget, this.dragDataStore ) ) {\r\n                // Set the current drag operation to either \"copy\" or \"move\", as appropriate given the platform conventions.\r\n                //this.currentDragOperation = \"copy\"; //or move. spec says its platform specific behaviour.\r\n                //}\r\n                //else {\r\n                // If the current target element is an element with a dropzone attribute that matches the drag data store\r\n                //this.currentDragOperation = DragOperationController.GetOperationForMatchingDropzone( this.currentDropTarget, this.dragDataStore );\r\n                //}\r\n                // when dragover is not prevented and no dropzones are there, no drag operation\r\n                this._currentDragOperation = DROP_EFFECTS[ DROP_EFFECT.NONE ];\r\n            }\r\n            // Otherwise (if the dragover event is canceled), set the current drag operation based on the values of the effectAllowed and\r\n            // dropEffect attributes of the DragEvent object's dataTransfer object as they stood after the event dispatch finished\r\n            else {\r\n\r\n                console.log( \"dnd-poly: dragover prevented.\" );\r\n\r\n                this._currentDragOperation = determineDragOperation( this._dataTransfer.effectAllowed, this._dataTransfer.dropEffect );\r\n            }\r\n        }\r\n\r\n        console.log( \"dnd-poly: d'n'd iteration ended. current drag operation: \" + this._currentDragOperation );\r\n\r\n        // THIS IS SKIPPED SINCE SUPPORT IS ONLY AVAILABLE FOR DOM ELEMENTS\r\n        // Otherwise, if the current target element is not a DOM element, use platform-specific mechanisms to determine what drag operation is\r\n        // being performed (none, copy, link, or move), and set the current drag operation accordingly.\r\n\r\n        //Update the drag feedback (e.g. the mouse cursor) to match the current drag operation, as follows:\r\n        // ---------------------------------------------------------------------------------------------------------\r\n        // Drag operation   |\tFeedback\r\n        // \"copy\"\t        |  Data will be copied if dropped here.\r\n        // \"link\"\t        |  Data will be linked if dropped here.\r\n        // \"move\"\t        |  Data will be moved if dropped here.\r\n        // \"none\"\t        |  No operation allowed, dropping here will cancel the drag-and-drop operation.\r\n        // ---------------------------------------------------------------------------------------------------------\r\n\r\n        if( previousDragOperation !== this._currentDragOperation ) {\r\n            this._dragImage.classList.remove( CLASS_PREFIX + previousDragOperation );\r\n        }\r\n\r\n        const currentDragOperationClass = CLASS_PREFIX + this._currentDragOperation;\r\n\r\n        this._dragImage.classList.add( currentDragOperationClass );\r\n    }\r\n\r\n    /**\r\n     * according to https://html.spec.whatwg.org/multipage/interaction.html#drag-and-drop-processing-model\r\n     */\r\n    private _dragOperationEnded( state:DragOperationState ):boolean {\r\n\r\n        console.log( \"dnd-poly: drag operation end detected with \" + this._currentDragOperation );\r\n\r\n        // if( DEBUG ) {\r\n        //\r\n        //     var debug_class_user_selection = CLASS_PREFIX + \"immediate-user-selection\",\r\n        //         debug_class_drop_target = CLASS_PREFIX + \"current-drop-target\";\r\n        //\r\n        //     if( this._currentDropTarget ) {\r\n        //         this._currentDropTarget.classList.remove( debug_class_drop_target );\r\n        //\r\n        //     }\r\n        //     if( this._immediateUserSelection ) {\r\n        //         this._immediateUserSelection.classList.remove( debug_class_user_selection );\r\n        //     }\r\n        // }\r\n\r\n        //var dropped:boolean = undefined;\r\n\r\n        // Run the following steps, then stop the drag-and-drop operation:\r\n\r\n        // If the current drag operation is \"none\" (no drag operation), or,\r\n        // if the user ended the drag-and-drop operation by canceling it (e.g. by hitting the Escape key), or\r\n        // if the current target element is null, then the drag operation failed.\r\n        const dragFailed = (this._currentDragOperation === DROP_EFFECTS[ DROP_EFFECT.NONE ]\r\n            || this._currentDropTarget === null\r\n            || state === DragOperationState.CANCELLED);\r\n        if( dragFailed ) {\r\n\r\n            // Run these substeps:\r\n\r\n            // Let dropped be false.\r\n            //dropped = false;\r\n\r\n            // If the current target element is a DOM element, fire a DND event named dragleave at it;\r\n            if( isDOMElement( this._currentDropTarget ) ) {\r\n                this._dragDataStore.mode = DragDataStoreMode.PROTECTED;\r\n                this._dataTransfer.dropEffect = DROP_EFFECTS[ DROP_EFFECT.NONE ];\r\n                dispatchDragEvent( \"dragleave\", this._currentDropTarget, this._lastTouchEvent, this._dragDataStore, this._dataTransfer, false );\r\n            }\r\n\r\n            // THIS IS SKIPPED SINCE SUPPORT IS ONLY AVAILABLE FOR DOM ELEMENTS\r\n            // otherwise, if it is not null, use platform-specific conventions for drag cancellation.\r\n            //else if( this.currentDropTarget !== null ) {\r\n            //}\r\n        }\r\n        // Otherwise, the drag operation was as success; run these substeps:\r\n        else {\r\n\r\n            // Let dropped be true.\r\n            //dropped = true;\r\n\r\n            // If the current target element is a DOM element, fire a DND event named drop at it;\r\n            if( isDOMElement( this._currentDropTarget ) ) {\r\n\r\n                // If the event is canceled, set the current drag operation to the value of the dropEffect attribute of the\r\n                // DragEvent object's dataTransfer object as it stood after the event dispatch finished.\r\n\r\n                this._dragDataStore.mode = DragDataStoreMode.READONLY;\r\n                this._dataTransfer.dropEffect = this._currentDragOperation;\r\n                if( dispatchDragEvent( \"drop\", this._currentDropTarget, this._lastTouchEvent, this._dragDataStore, this._dataTransfer ) ===\r\n                    true ) {\r\n\r\n                    this._currentDragOperation = this._dataTransfer.dropEffect;\r\n                }\r\n                // Otherwise, the event is not canceled; perform the event's default action, which depends on the exact target as follows:\r\n                else {\r\n\r\n                    // THIS IS SKIPPED SINCE SUPPORT IS ONLY AVAILABLE FOR DOM ELEMENTS\r\n                    // If the current target element is a text field (e.g. textarea, or an input element whose type attribute is in the Text state)\r\n                    // or an editable element,\r\n                    // and the drag data store item list has an item with the drag data item type string \"text/plain\"\r\n                    // and the drag data item kind Plain Unicode string\r\n                    //if( ElementIsTextDropzone( this.currentDropTarget, this.dragDataStore ) ) {\r\n                    // Insert the actual data of the first item in the drag data store item list to have a drag data item type string of\r\n                    // \"text/plain\" and a drag data item kind that is Plain Unicode string into the text field or editable element in a manner\r\n                    // consistent with platform-specific conventions (e.g. inserting it at the current mouse cursor position, or inserting it at\r\n                    // the end of the field).\r\n                    //}\r\n                    // Otherwise\r\n                    //else {\r\n                    // Reset the current drag operation to \"none\".\r\n                    this._currentDragOperation = DROP_EFFECTS[ DROP_EFFECT.NONE ];\r\n                    //}\r\n                }\r\n            }\r\n            // THIS IS SKIPPED SINCE SUPPORT IS ONLY AVAILABLE FOR DOM ELEMENTS\r\n            // otherwise, use platform-specific conventions for indicating a drop.\r\n            //else {\r\n            //}\r\n        }\r\n\r\n        return dragFailed;\r\n\r\n        // THIS IS SKIPPED SINCE SUPPORT IS ONLY AVAILABLE FOR DOM ELEMENTS\r\n        //if( this.dragend( this.sourceNode ) ) {\r\n        //    return;\r\n        //}\r\n\r\n        // Run the appropriate steps from the following list as the default action of the dragend event:\r\n\r\n        //if( !dropped ) {\r\n        //    return;\r\n        //}\r\n        // dropped is true\r\n\r\n        //if( this.currentDragOperation !== \"move\" ) {\r\n        //    return;\r\n        //}\r\n        //// drag operation is move\r\n        //\r\n        //if( ElementIsTextDropzone( this.currentDropTarget ) === false ) {\r\n        //    return;\r\n        //}\r\n        //// element is textfield\r\n        //\r\n        //// and the source of the drag-and-drop operation is a selection in the DOM\r\n        //if( this.sourceNode.nodeType === 1 ) {\r\n        //    // The user agent should delete the range representing the dragged selection from the DOM.\r\n        //}\r\n        //// and the source of the drag-and-drop operation is a selection in a text field\r\n        //else if( this.sourceNode.nodeType === 3 ) {\r\n        //    // The user agent should delete the dragged selection from the relevant text field.\r\n        //}\r\n        //// Otherwise, The event has no default action.\r\n    }\r\n\r\n    // dispatch dragend event and cleanup drag operation\r\n    private _finishDragOperation():void {\r\n        console.log( \"dnd-poly: dragimage snap back transition ended\" );\r\n\r\n        // Fire a DND event named dragend at the source node.\r\n        this._dragDataStore.mode = DragDataStoreMode.PROTECTED;\r\n        this._dataTransfer.dropEffect = this._currentDragOperation;\r\n        dispatchDragEvent( \"dragend\", this._sourceNode, this._lastTouchEvent, this._dragDataStore, this._dataTransfer, false );\r\n\r\n        // drag operation over and out\r\n        this._dragOperationState = DragOperationState.ENDED;\r\n        this._cleanup();\r\n    }\r\n\r\n    //</editor-fold>\r\n}\r\n","import { addDocumentListener, createDragImage, onEvt, Point } from \"./internal/dom-utils\";\r\nimport { DragOperationController, DragOperationState } from \"./internal/drag-operation-controller\";\r\nimport { tryFindDraggableTarget } from \"./internal/drag-utils\";\r\nimport { detectFeatures } from \"./internal/feature-detection\";\r\nimport { EVENT_DRAG_DRAGSTART_PENDING, EVENT_DRAG_DRAGSTART_CANCEL } from \"./internal/constants\";\r\n\r\n// default config\r\nconst config:Config = {\r\n    iterationInterval: 150,\r\n    tryFindDraggableTarget: tryFindDraggableTarget,\r\n    dragImageSetup: createDragImage,\r\n    elementFromPoint: function( x, y ) { return document.elementFromPoint( x, y ); }\r\n};\r\n\r\n// reference to the currently active drag operation\r\nlet activeDragOperation:DragOperationController;\r\n\r\n/**\r\n * event handler for initial touch events that possibly start a drag and drop operation.\r\n */\r\nfunction onTouchstart( e:TouchEvent ) {\r\n\r\n    console.log( \"dnd-poly: global touchstart\" );\r\n\r\n    // From the moment that the user agent is to initiate the drag-and-drop operation,\r\n    // until the end of the drag-and-drop operation, device input events (e.g. mouse and keyboard events) must be suppressed.\r\n\r\n    // only allow one drag operation at a time\r\n    if( activeDragOperation ) {\r\n        console.log( \"dnd-poly: drag operation already active\" );\r\n        return;\r\n    }\r\n\r\n    let dragTarget = config.tryFindDraggableTarget( e );\r\n\r\n    // If there is no such element, then nothing is being dragged; abort these\r\n    // steps, the drag-and-drop operation is never started.\r\n    if( !dragTarget ) {\r\n        console.log(\"dnd-poly: no draggable at touchstart coordinates\");\r\n        return;\r\n    }\r\n\r\n    try {\r\n        activeDragOperation = new DragOperationController( e, config, dragTarget as HTMLElement, dragOperationEnded );\r\n    }\r\n    catch( err ) {\r\n        dragOperationEnded( config, e, DragOperationState.CANCELLED );\r\n        // rethrow exception after cleanup\r\n        throw err;\r\n    }\r\n}\r\n\r\nfunction onDelayTouchstart( evt:TouchEvent ) {\r\n\r\n    console.log(\"dnd-poly: setup delayed dragstart..\");\r\n\r\n    const el = evt.target;\r\n\r\n    const heldItem = () => {\r\n\r\n        console.log(\"dnd-poly: starting delayed drag..\");\r\n\r\n        end.off();\r\n        cancel.off();\r\n        move.off();\r\n        scroll.off();\r\n        onTouchstart( evt );\r\n    };\r\n\r\n    const onReleasedItem = (event:Event) => {\r\n\r\n        console.log(\"dnd-poly: aborting delayed drag because of \" + event.type);\r\n\r\n        end.off();\r\n        cancel.off();\r\n        move.off();\r\n        scroll.off();\r\n\r\n        if (el) {\r\n            el.dispatchEvent(new CustomEvent(EVENT_DRAG_DRAGSTART_CANCEL, { bubbles: true, cancelable: true }));\r\n        }\r\n\r\n        clearTimeout( timer );\r\n    };\r\n\r\n    if (el) {\r\n        el.dispatchEvent(new CustomEvent(EVENT_DRAG_DRAGSTART_PENDING, { bubbles: true, cancelable: true }));\r\n    }\r\n\r\n    const timer = window.setTimeout( heldItem, config.holdToDrag );\r\n\r\n    const end = onEvt( el, \"touchend\", onReleasedItem );\r\n    const cancel = onEvt( el, \"touchcancel\", onReleasedItem );\r\n    const move = onEvt( el, \"touchmove\", onReleasedItem );\r\n    // scroll events don't bubble, only way to listen to scroll events\r\n    // that are about to happen in nested scrollables is by listening in capture phase\r\n    const scroll = onEvt( window, \"scroll\", onReleasedItem, true );\r\n}\r\n\r\n/**\r\n * Implements callback invoked when a drag operation has ended or crashed.\r\n */\r\nfunction dragOperationEnded( _config:Config, event:TouchEvent, state:DragOperationState ) {\r\n\r\n    // we need to make the default action happen only when no drag operation took place\r\n    if( state === DragOperationState.POTENTIAL ) {\r\n\r\n        console.log( \"dnd-poly: Drag never started. Last event was \" + event.type );\r\n\r\n        // when lifecycle hook is present\r\n        if( _config.defaultActionOverride ) {\r\n\r\n            try {\r\n\r\n                _config.defaultActionOverride( event );\r\n\r\n                if( event.defaultPrevented ) {\r\n\r\n                    console.log( \"dnd-poly: defaultActionOverride has taken care of triggering the default action. preventing default on original event\" );\r\n                }\r\n\r\n            }\r\n            catch( e ) {\r\n\r\n                console.log( \"dnd-poly: error in defaultActionOverride: \" + e );\r\n            }\r\n        }\r\n    }\r\n\r\n    // reset drag operation container\r\n    activeDragOperation = null;\r\n}\r\n\r\n//<editor-fold desc=\"public api\">\r\n\r\nexport { Point } from \"./internal/dom-utils\";\r\n\r\n// function signature for the dragImageTranslateOverride hook\r\nexport type DragImageTranslateOverrideFn = ( // corresponding touchmove event\r\n    event:TouchEvent,\r\n    // the processed touch event viewport coordinates\r\n    hoverCoordinates:Point,\r\n    // the element under the calculated touch coordinates\r\n    hoveredElement:HTMLElement,\r\n    // callback for updating the drag image offset\r\n    translateDragImageFn:( offsetX:number, offsetY:number ) => void ) => void;\r\n\r\nexport interface Config {\r\n\r\n    // flag to force the polyfill being applied and not rely on internal feature detection\r\n    forceApply?:boolean;\r\n\r\n    // useful for when you want the default drag image but still want to apply\r\n    // some static offset from touch coordinates to drag image coordinates\r\n    // defaults to (0,0)\r\n    dragImageOffset?:Point;\r\n\r\n    // if the dragImage shall be centered on the touch coordinates\r\n    // defaults to false\r\n    dragImageCenterOnTouch?:boolean;\r\n\r\n    // the drag and drop operation involves some processing. here you can specify in what interval this processing takes place.\r\n    // defaults to 150ms\r\n    iterationInterval?:number;\r\n\r\n    // hook for custom logic that decides if a drag operation should start\r\n    dragStartConditionOverride?:( event:TouchEvent ) => boolean;\r\n\r\n    // hook for custom logic that can manipulate the drag image translate offset\r\n    dragImageTranslateOverride?:DragImageTranslateOverrideFn;\r\n\r\n    // hook for custom logic that can override the default action based on the original touch event when the drag never started\r\n    // be sure to call event.preventDefault() if handling the default action in the override to prevent the browser default.\r\n    defaultActionOverride?:( event:TouchEvent ) => void;\r\n\r\n    // Drag action delay on touch devices (\"hold to drag\" functionality, useful for scrolling draggable items). Defaults to no delay.\r\n    holdToDrag?:number;\r\n\r\n    // function invoked for each touchstart event to determine if and which touched element is detected as \"draggable\"\r\n    tryFindDraggableTarget?:( event:TouchEvent ) => HTMLElement | undefined;\r\n\r\n    // function for creating a copy of the dragged element\r\n    dragImageSetup?:( element:HTMLElement ) => HTMLElement;\r\n\r\n    // function for determining element that is currently hovered while dragging\r\n    // defaults to `document.elementFromPoint()`\r\n    elementFromPoint?:( x:number, y:number ) => Element;\r\n}\r\n\r\nexport function polyfill( override?:Config ):boolean {\r\n\r\n    if( override ) {\r\n        // overwrite default config with user config\r\n        Object.keys( override ).forEach( function( key ) {\r\n            config[ key ] = override[ key ];\r\n        } );\r\n    }\r\n\r\n    // only do feature detection when config does not force apply the polyfill\r\n    if( !config.forceApply ) {\r\n\r\n        // feature/browser detection\r\n        const detectedFeatures = detectFeatures();\r\n\r\n        // if( DEBUG ) {\r\n        //     Object.keys( detectedFeatures ).forEach( function( key ) {\r\n        //         console.log( \"dnd-poly: detected feature '\" + key + \" = \" + detectedFeatures[ key ] + \"'\" );\r\n        //     } );\r\n        // }\r\n\r\n        // check if native drag and drop support is there\r\n        if( detectedFeatures.userAgentSupportingNativeDnD\r\n            && detectedFeatures.draggable\r\n            && detectedFeatures.dragEvents ) {\r\n            // no polyfilling required\r\n            return false;\r\n        }\r\n    }\r\n\r\n    console.log( \"dnd-poly: Applying mobile drag and drop polyfill.\" );\r\n\r\n    // add listeners suitable for detecting a potential drag operation\r\n    if( config.holdToDrag ) {\r\n        console.log(\"dnd-poly: holdToDrag set to \" + config.holdToDrag);\r\n        addDocumentListener( \"touchstart\", onDelayTouchstart, false );\r\n    } else {\r\n        addDocumentListener( \"touchstart\", onTouchstart, false );\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\n//</editor-fold>\r\n"],"names":[],"mappings":"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"}